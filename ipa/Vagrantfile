# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 1.6.0"

HERE = File.dirname(__FILE__)
ENV['ANSIBLE_CONFIG'] = "#{HERE}/../ansible/ansible.cfg"
# virtual env for Ansible 2
# ENV['PATH'] = "#{HERE}/../venv/bin:" + ENV['PATH']

# Workaround for ssh problem with ED25519 curve
# SSH not up: #<Vagrant::Errors::NetSSHException: An error occurred in the underlying SSH library that Vagrant uses.
# curve name mismatched
if ENV.has_key?('SSH_AUTH_SOCK')
    ENV.delete('SSH_AUTH_SOCK')
end

DOMAIN="ipa.example"

Vagrant.configure(2) do |config|
    #config.vm.box = "cheimes/freeipa-f23"
    config.vm.box = "cheimes/freeipa43-f23"
    #config.vm.box = "cheimes/freeipa-centos72"
    #config.vm.box = "freeipa-rhel72"

    # no rsync, Ansible playbook syncs required files manually
    config.vm.synced_folder ".", "/vagrant", disabled: true

    if Vagrant.has_plugin?("vagrant-hostmanager")
        config.hostmanager.enabled = true
        config.hostmanager.manage_host = true
        config.hostmanager.manage_guest = false
    end

    # 256 MB is enough for VPN, NFS and client
    config.vm.provider :libvirt do |domain|
        domain.memory = 256
    end

    config.vm.define "ipamaster" do |host|
        host.vm.hostname = "master.#{DOMAIN}"
        host.vm.provider :libvirt do |domain|
            domain.memory = 1536
            domain.cpus = 2
        end
    end

    config.vm.define "ipareplica1" do |host|
        host.vm.hostname = "replica1.#{DOMAIN}"
        host.vm.provider :libvirt do |domain|
            domain.memory = 1024
        end
    end

    config.vm.define "ipafileserver" do |host|
        host.vm.hostname = "fileserver.#{DOMAIN}"
    end

    config.vm.define "ipavpnserver" do |host|
        host.vm.hostname = "vpn.#{DOMAIN}"
    end

    config.vm.define "ipaidpserver" do |host|
        host.vm.hostname = "idp.#{DOMAIN}"
    end

    config.vm.define "ipaclient1" do |host|
        host.vm.hostname = "client1.#{DOMAIN}"

        # Vagrant's parallized Ansible is just too fragile. Use one instance
        # of Ansible with limit=all and let Ansible take care of parallel
        # execution. It makes the output more readable, too.
        host.vm.provision "ansible" do |ansible|
            ansible.limit = "all"
            ansible.playbook = "../ansible/ipa-playbook.yml"
            ansible.groups = {
                "ipaserver_master" => ["ipamaster"],
                "ipaserver_replica" => ["ipareplica1"],
                "ipa_client" => ["ipaclient1"],
                "ipa_vpnserver" => ["ipavpnserver"],
                "ipa_nfsserver" => ["ipafileserver"],
                "ipa_smbserver" => ["ipafileserver"],
                "ipa_httpexample" => ["ipafileserver"],
                "ipa_ipsilon_idp" => ["ipaidpserver"],
                "ipa_sp_example" => ["ipafileserver"],
                "ipa_nfsclient" => ["ipamaster", "ipareplica1", "ipaclient1"],
                "ipa_all" => ["ipamaster", "ipareplica1", "ipaclient1", "ipavpnserver", "ipafileserver", "ipaidpserver"],
            }
            ansible.verbose = 'vv'
            # package-install: don't download and install packages from the internet
            # package-upgrade: don't upgrade all packages
            # package-copr: don't install and use COPR with latest FreeIPA
            # network: Don't use network (no DNS forwarder, no package installations)
            # ipa-install: skip installation (ipa-server-install, ipa-client-install)
            ansible.skip_tags = [
                'package-install',
                'package-upgrade',
                'package-copr',
                #'network',
                #'ipa-install',
                'dummy',
            ]
            # ansible.tags = ['bootstrap', 'common']
            ansible.extra_vars = {
                vagrant_root: HERE,
                #ipa_master_fqdn: "master.#{DOMAIN}"
            }
        end
    end
end
